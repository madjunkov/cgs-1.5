import * as React from "react"
import { Frame, RenderTarget, addPropertyControls, ControlType } from "framer"

const expoOut = [0.19, 1, 0.22, 1]

function getDistance(fromPoint, toPoint) {
    return Math.sqrt(
        (fromPoint.x - toPoint.x) * (fromPoint.x - toPoint.x) +
            (fromPoint.y - toPoint.y) * (fromPoint.y - toPoint.y)
    )
}

function getCorners(width, height) {
    return [
        { x: 0, y: 0 },
        { x: width, y: 0 },
        { x: width, y: height },
        { x: 0, y: height },
    ]
}

export function RippleFrame(props) {
    const { duration, dynamicRadius, radius, color } = props
    const ref = React.useRef(null)
    const [ripples, setRipples] = React.useState([])
    function getRadius(point) {
        var maxDistance = 0
        const corners = getCorners(props.width, props.height)
        corners.map(function(corner, i) {
            maxDistance = Math.max(maxDistance, getDistance(point, corner))
        })
        return maxDistance
    }

    console.log(RenderTarget)

    return (
        <Frame
            ref={ref}
            width={props.width}
            height={props.height}
            overflow="hidden"
            onTapStart={function(foo, p) {
                const rect = ref.current.getBoundingClientRect()
                const point = {
                    x: p.point.x - rect.left,
                    y: p.point.y - rect.top,
                }
                const _radius = dynamicRadius ? getRadius(point) : radius
                const ripple = {
                    key: Date.now(),
                    origin: point,
                    radius: _radius,
                }
                setRipples([...ripples, ripple])
            }}
        >
            {ripples.map(function(ripple) {
                return (
                    <RippleContainer
                        key={ripple.key}
                        scale={1}
                        origin={ripple.origin}
                        duration={duration}
                        rippleProps={{
                            radius: ripple.radius,
                            color: color,
                            transition: { duration: duration, ease: expoOut },
                            wipe: function() {
                                setRipples(
                                    ripples.filter(r => r.key !== ripple.key)
                                )
                            },
                        }}
                    />
                )
            })}
        </Frame>
    )
}

RippleFrame.defaultProps = {
    duration: 2,
    dynamicRadius: true,
    radius: 100,
    color: "rgba(255,255,255,.25)",
}

addPropertyControls(RippleFrame, {
    duration: {
        type: ControlType.Number,
        title: "Duration",
        max: 5,
        step: 0.1,
        unit: "s",
    },
    dynamicRadius: {
        type: ControlType.Boolean,
        title: "Size",
        enabledTitle: "Auto",
        disabledTitle: "Manual",
    },
    radius: {
        type: ControlType.Number,
        title: "Radius",
        displayStepper: true,
        unit: "px",
        min: 0,
        hidden(props) {
            return props.dynamicRadius
        },
    },
    color: {
        type: ControlType.Color,
        title: "Color",
    },
})

function RippleContainer({ scale, origin, duration, rippleProps }) {
    return (
        <Frame
            size={0}
            left={origin.x}
            top={origin.y}
            background={"#000"}
            overflow="visible"
            initial={{ scale: 0 }}
            animate={{ scale: scale }}
            transition={{ duration: duration, ease: expoOut }}
        >
            <Ripple props={rippleProps} />
        </Frame>
    )
}

function Ripple({ props }) {
    const { radius, color, transition, wipe } = props
    const [_opacity, _setOpacity] = React.useState(1)
    const [cease, setCease] = React.useState(false)
    function fade() {
        setCease(true)
        _setOpacity(0)
    }
    return (
        <Frame
            left={-radius}
            top={-radius}
            size={2 * radius}
            radius={radius}
            background={color}
            initial={{ opacity: 0 }}
            animate={{ opacity: _opacity }}
            transition={transition}
            onMouseUp={fade}
            onMouseOut={fade}
            onAnimationComplete={function() {
                if (cease) wipe()
            }}
        />
    )
}
